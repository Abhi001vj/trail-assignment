{"version":3,"sources":["utils/helpers.js","pages/Login.js","layout/Style.js","api/user.js","utils/mockApiHelper.js","data.js","components/Dialog.js","components/InputPage.js","components/Table.js","components/Chart.js","components/StatTable.js","components/OutputPage.js","components/Main.js","pages/Dashboard.js","reportWebVitals.js","layout/Header.js","layout/index.js","index.js"],"names":["sortSaleData","saleData","sortByKey","sort","saleDataA","saleDataB","dateA","Date","dateB","isBefore","Number","getMostRevenueEarningProduct","maximumRevenueEarningProduct","name","revenue","revenuePerProduct","forEach","item","hasOwnProperty","product","getMostSoldProduct","mostSoldProduct","count","sellCountPerProduct","sales_number","getAverageSale","reduce","curr","length","getMostExpensiveProduct","prev","index","prevRev","currRev","isValidName","splittedName","split","filter","isValidEmail","email","test","String","toLowerCase","useStyles","makeStyles","theme","container","padding","spacing","LoginPage","onLoginSuccess","classes","useState","setEmail","password","setPassword","hasError","setHasError","Container","className","maxWidth","Grid","xs","TextField","error","helperText","fullWidth","label","size","variant","value","onChange","e","target","type","Button","color","onClick","preventDefault","fetch","method","body","JSON","stringify","then","res","json","data","console","log","authToken","access_token","userId","user_id","localStorage","setItem","toast","catch","err","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","formControl","margin","minWidth","selectEmpty","marginTop","control","id","logout","removeItem","getCurrentUserInformation","parse","getItem","saveUserInformation","userInformation","saveSalesData","salesData","getSalesData","salesDataStr","countries","cities","Russia","UK","Ukrain","genders","chartFilters","sortKeys","AlertDialog","props","Dialog","open","openDialog","onClose","handleCloseDialog","aria-labelledby","aria-describedby","DialogContent","DialogContentText","DialogActions","handleAccept","autoFocus","InputPage","onLogout","setShowoutput","setcsvData","setName","age","setAge","gender","setGender","city","setCity","country","setCountry","file","setFile","rawData","setRawData","cityList","setCityList","setOpenDialog","hasUpdatedUserInformation","setHasUpdatedUserInformation","useEffect","btnEnabeled","updateData","csv","Papa","unparse","handleCSVUpload","complete","onShowOutPut","shift","rows","processedData","row","push","date","preProcessData","sales","style","textAlign","Typography","event","FormControl","InputLabel","Select","labelId","map","MenuItem","FormHelperText","Array","elementInArray","userInformationObject","success","files","accept","float","disabled","multiline","rowsMax","InputLabelProps","shrink","Output","undefined","columns","field","headerName","pageSize","checkboxSelection","Chart","state","labels","datasets","yAxisLabel","backgroundColor","borderColor","borderWidth","options","text","fontSize","legend","StatTable","Object","keys","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","currentUserName","avgSaleCurrentUser","avgSale","mostExpensiveProduct","mostRevenueEarningProduct","OutputPage","handleReset","userInfo","setUserInfo","aggregatedData","setAggregatedData","csvData","chartFilter","setChartFilter","orderBy","setOrderBy","fontWeight","lg","Main","showOutput","createServer","models","user","Model","sale","extend","belongsTo","userinformation","seeds","server","userData","routes","this","post","schema","request","users","all","requestBody","find","max","s","n","token","i","charAt","Math","floor","random","generateToken","token_type","Response","code","message","payLoad","db","userinformations","insert","get","params","currentUserId","currentUserSalesData","Dashboard","setToken","Login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","AppBar","clsx","Toolbar","noWrap","Layout","CssBaseline","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a377cc8.chunk.js","sourcesContent":["import { isBefore } from \"date-fns\";\n\n/**\n * Preprocessing the csv data to add key attribute for each item in each row of the sales data.\n * @param {array} salesData\n */\nexport const preProcessData = (salesData) => {\n  const processedData = [];\n  salesData.forEach((row, index) => {\n    // Checking if the current row is empty or not. If the row is empty we are ignoring that row.\n    if (row[0]) {\n      processedData.push({\n        id: index,\n        date: row[0],\n        product: row[1],\n        sales_number: row[2],\n        revenue: row[3],\n        userId: row[4],\n      });\n    }\n  });\n  return processedData;\n};\n\n/**\n * Sort sales data by user defined sort key.\n * @param {array} saleData\n * @param {string} sortByKey\n */\nexport const sortSaleData = (saleData, sortByKey) => {\n  const sortedData = saleData.sort((saleDataA, saleDataB) => {\n    if (sortByKey === \"product\") {\n      if (saleDataA[sortByKey] > saleDataB[sortByKey]) return 1;\n      else if (saleDataA[sortByKey] < saleDataB[sortByKey]) return -1;\n      return 0;\n    } else if (sortByKey === \"date\") {\n      const dateA = new Date(saleDataA[sortByKey]);\n      const dateB = new Date(saleDataB[sortByKey]);\n\n      if (isBefore(dateA, dateB)) return -1;\n      else if (!isBefore(dateA, dateB)) return 1;\n      return 0;\n    }\n    return Number(saleDataA[sortByKey]) - Number(saleDataB[sortByKey]);\n  });\n\n  return sortedData;\n};\n\n/**\n * Find the most revenue earning product.\n * @param {array} saleData\n */\nexport const getMostRevenueEarningProduct = (saleData) => {\n  let maximumRevenueEarningProduct = {\n    name: \"\",\n    revenue: 0,\n  };\n\n  let revenuePerProduct = {};\n  saleData.forEach((item) => {\n    if (!revenuePerProduct.hasOwnProperty(item.product)) {\n      revenuePerProduct[item.product] = 0;\n    }\n    revenuePerProduct[item.product] += Number(item.revenue);\n    if (\n      revenuePerProduct[item.product] > maximumRevenueEarningProduct.revenue\n    ) {\n      maximumRevenueEarningProduct.name = item.product;\n      maximumRevenueEarningProduct.revenue = revenuePerProduct[item.product];\n    }\n  });\n\n  return maximumRevenueEarningProduct;\n};\n\n/**\n * Find the most sold product from the given saleData\n * @param {array} saleData\n */\nexport const getMostSoldProduct = (saleData) => {\n  let mostSoldProduct = {\n    name: \"\",\n    count: 1,\n  };\n\n  let sellCountPerProduct = {};\n  saleData.forEach((item) => {\n    if (!sellCountPerProduct.hasOwnProperty(item.product)) {\n      sellCountPerProduct[item.product] = 0;\n    }\n    sellCountPerProduct[item.product] += Number(item.sales_number);\n    if (sellCountPerProduct[item.product] > mostSoldProduct.count) {\n      mostSoldProduct.name = item.product;\n      mostSoldProduct.count = sellCountPerProduct[item.product];\n    }\n  });\n  return mostSoldProduct;\n};\n\n/**\n * Calculate the average revenue for the given saleData\n * @param {array} saleData\n */\nexport const getAverageSale = (saleData) => {\n  const totalRevenue = saleData.reduce(\n    (revenue, curr) => (revenue += Number(curr.revenue)),\n    0\n  );\n  return totalRevenue / saleData.length;\n};\n\n/**\n * Find the most expensive product from the saleData.\n * @param {array} saleData\n */\nexport const getMostExpensiveProduct = (saleData) => {\n  return saleData.reduce((prev, curr, index) => {\n    const prevRev = Number(prev.revenue);\n    const currRev = Number(curr.revenue);\n    if (index === 0 || prevRev < currRev) {\n      prev = curr;\n    }\n    return prev;\n  }, {});\n};\n\n/**\n * Checks if given name has atleast first name and last name part.\n * @param {string} name \n */\nexport const isValidName = (name) => {\n  if (!name) return false;\n  const splittedName = name.split(\" \");\n  return splittedName.length >= 2 && splittedName.filter(item => item !== '').length === splittedName.length;\n};\n\n/**\n * Check if given email address is valid.\n * @param {string} email \n */\nexport const isValidEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Container, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { isValidEmail } from \"../utils/helpers\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { isValid } from \"date-fns\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(3),\n  },\n}));\n\nconst LoginPage = ({ onLoginSuccess }) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [hasError, setHasError] = useState(false);\n\n  const onSubmitForm = (e) => {\n    e.preventDefault();\n    if (!email || !password) {\n      setHasError(true);\n      return;\n    }\n\n    // Mock API call for authentication.\n    fetch(\"/api/token\", {\n      method: \"post\",\n      body: JSON.stringify({ email, password }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        const authToken = data.access_token;\n        const userId = data.user_id;\n        if (!authToken) {\n          toast.error(\"Email and/or password doesn't match\");\n          return;\n        }\n        onLoginSuccess(authToken);\n        localStorage.setItem(\"authToken\", authToken);\n        localStorage.setItem(\"currentUserId\", userId);\n      })\n      .catch((err) => console.log(err));\n  };\n  return (\n    <Container className={classes.container} maxWidth=\"xs\">\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  error={(hasError && !email) || (email && !isValidEmail(email))}\n                  helperText={\n                    hasError && !email\n                      ? \"Email can not be empty\"\n                      : email && !isValidEmail(email)\n                      ? \"Please insert valid email address\"\n                      : \"\"\n                  }\n                  fullWidth\n                  label=\"Email\"\n                  name=\"email\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={hasError && !password}\n                  helperText={\n                    hasError && !password ? \"Password can not be empty\" : null\n                  }\n                  fullWidth\n                  label=\"Password\"\n                  name=\"password\"\n                  size=\"small\"\n                  type=\"password\"\n                  variant=\"outlined\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"secondary\"\n              fullWidth\n              type=\"submit\"\n              variant=\"contained\"\n              onClick={onSubmitForm}\n            >\n              Log in\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n      <ToastContainer />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import { makeStyles } from '@material-ui/core/styles'\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t},\n\ttoolbar: {\n\t\tpaddingRight: 24, // keep right padding when drawer closed\n\t},\n\ttoolbarIcon: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'flex-end',\n\t\tpadding: '0 8px',\n\t\t...theme.mixins.toolbar,\n\t},\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen,\n\t\t}),\n\t},\n\tappBarShift: {\n\t\tmarginLeft: drawerWidth,\n\t\twidth: `calc(100% - ${drawerWidth}px)`,\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen,\n\t\t}),\n\t},\n\tmenuButton: {\n\t\tmarginRight: 36,\n\t},\n\tmenuButtonHidden: {\n\t\tdisplay: 'none',\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n\tdrawerPaper: {\n\t\tposition: 'relative',\n\t\twhiteSpace: 'nowrap',\n\t\twidth: drawerWidth,\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.enteringScreen,\n\t\t}),\n\t},\n\tdrawerPaperClose: {\n\t\toverflowX: 'hidden',\n\t\ttransition: theme.transitions.create('width', {\n\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\tduration: theme.transitions.duration.leavingScreen,\n\t\t}),\n\t\twidth: theme.spacing(7),\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: theme.spacing(9),\n\t\t},\n\t},\n\tappBarSpacer: theme.mixins.toolbar,\n\tcontent: {\n\t\tflexGrow: 1,\n\t\theight: '100vh',\n\t\toverflow: 'auto',\n\t},\n\tcontainer: {\n\t\tpaddingTop: theme.spacing(4),\n\t\tpaddingBottom: theme.spacing(4),\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\tdisplay: 'flex',\n\t\toverflow: 'auto',\n\t\tflexDirection: 'column',\n\t},\n\tfixedHeight: {\n\t\theight: 240,\n\t},\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t\twidth: '100%',\n\t},\n\tselectEmpty: {\n\t\tmarginTop: theme.spacing(2),\n\t},\n\tcontrol: {\n\t\tpadding: theme.spacing(2),\n\t},\n}))\n\nexport default useStyles\n","export default [\n  {\n    id: 1,\n    email: \"sabbir@alam.com\",\n    password: \"123456\",\n  },\n  {\n    id: 2,\n    email: \"shabnam@mushrit.com\",\n    password: \"123456\",\n  },\n  {\n    id: 3,\n    email: \"sakib@alam.com\",\n    password: \"123456\",\n  },\n  {\n    id: 4,\n    email: \"akter@saima.com\",\n    password: \"123456\",\n  },\n];\n","import userData from \"../api/user\";\nimport {\n  getMostExpensiveProduct,\n  getMostRevenueEarningProduct,\n  getMostSoldProduct,\n  getAverageSale,\n} from \"./helpers\";\n\n/**\n * Mock API for getting authentication token if we find a match for the given email and password in the mock user data.\n * @param {string} email\n * @param {string} password\n */\nexport const getAuthToken = (email, password, users) => {\n  const currentUser = userData.find(\n    (item) => item.email === email && item.password === password\n  );\n  if (currentUser?.authToken) {\n    localStorage.setItem(\"authToken\", currentUser.authToken);\n    localStorage.setItem(\"currentUserId\", currentUser.id);\n    return currentUser.authToken;\n  }\n  return null;\n};\n\n/**\n * Logout procedure and cleaning up localStorage.\n */\nexport const logout = () => {\n  localStorage.removeItem(\"authToken\");\n  localStorage.removeItem(\"currentUserId\");\n  localStorage.removeItem(\"currentUserInformation\");\n  localStorage.removeItem('salesData');\n};\n\n/**\n * Mock API for current user information.\n */\nexport const getCurrentUserInformation = () => {\n  return JSON.parse(localStorage.getItem(\"currentUserInformation\"));\n};\n\n/**\n * Save user information in localStorage.\n * @param {object} userInformation\n */\nexport const saveUserInformation = (userInformation) => {\n  return localStorage.setItem(\n    \"currentUserInformation\",\n    JSON.stringify({\n      ...userInformation,\n      userId: localStorage.getItem(\"currentUserId\"),\n    })\n  );\n};\n\n/**\n * Saves saleData in the localStorage\n * @param {array} salesData\n */\nexport const saveSalesData = (salesData) => {\n  localStorage.setItem(\"salesData\", JSON.stringify(salesData));\n};\n\n/**\n * Get saleData from the localStorage\n */\nexport const getSalesData = () => {\n  const salesDataStr = localStorage.getItem(\"salesData\");\n  if (salesDataStr) {\n    return JSON.parse(salesDataStr);\n  }\n  return [];\n};\n\n/**\n * Generate the aggregated data for showing in the statistics table.\n */\nexport const getAggregatedData = () => {\n  const currentUserId = localStorage.getItem(\"currentUserId\");\n  const salesData = getSalesData();\n  const currentUserSalesData = salesData.filter(\n    (item) => item.userId === currentUserId\n  );\n  return {\n    avgSaleCurrentUser: getAverageSale(currentUserSalesData),\n    avgSale: getAverageSale(salesData),\n    mostExpensiveProduct: getMostExpensiveProduct(currentUserSalesData),\n    mostRevenueEarningProduct: getMostRevenueEarningProduct(\n      currentUserSalesData\n    ),\n    mostSoldProduct: getMostSoldProduct(currentUserSalesData),\n  };\n};\n\nexport const generateToken = (max) => {\n  var s = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  var n = s.length-1;\n  var token = '';\n  for (var i = 0; i < max; i++) {\n      token += s.charAt(Math.floor(Math.random() * n));\n  }\n  return token;\n}\n","export const countries = ['Russia', 'UK', 'Ukrain']\n\nexport const cities = {\n\tRussia: [\n\t\t'Novosibirsk',\n\t\t'Nizhny Novgorod',\n\t\t'Samara',\n\t\t'Omsk',\n\t\t'Kazan',\n\t\t'Ufa',\n\t\t'Chelyabinsk',\n\t],\n\tUK: ['LONDON', 'Birmingham', 'Leeds', 'Glasgow', 'Sheffield', ''],\n\tUkrain: [\n\t\t'Mykolaiv',\n\t\t'Kryvy Rig\t',\n\t\t'Zaporozhye',\n\t\t'Odessa',\n\t\t'Donetsk',\n\t\t'Dnepropetrovsk',\n\t\t'Kharkov',\n\t\t'KIEV',\n\t],\n}\n\nexport const genders = ['Male', 'Female', 'Unspecified']\n\nexport const chartFilters = ['sales_number', 'revenue']; \n\nexport const sortKeys = ['date', 'product', 'sales_number', 'revenue'];\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\n\nexport default function AlertDialog(props) {\n\treturn (\n\t\t<div>\n\t\t\t<Dialog\n\t\t\t\topen={props.openDialog}\n\t\t\t\tonClose={props.handleCloseDialog}\n\t\t\t\taria-labelledby='alert-dialog-title'\n\t\t\t\taria-describedby='alert-dialog-description'\n\t\t\t>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText id='alert-dialog-description'>\n\t\t\t\t\t\tAre you sure you want to replace the data\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={props.handleCloseDialog} color='primary'>\n\t\t\t\t\t\tNo\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={props.handleAccept} color='primary' autoFocus>\n\t\t\t\t\t\tYes\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t)\n}\n","import React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useStyles from \"../layout/Style\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { logout } from \"../utils/mockApiHelper\";\nimport {\n  preProcessData,\n  sortSaleData,\n  isValidEmail,\n  isValidName,\n} from \"../utils/helpers\";\nimport { countries, cities, genders, sortKeys } from \"../data\";\nimport Papa from \"papaparse\";\nimport {\n  getCurrentUserInformation,\n  saveUserInformation,\n  saveSalesData,\n} from \"../utils/mockApiHelper\";\nimport Dialog from \"./Dialog\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { isValid } from \"date-fns\";\n\nconst InputPage = ({ onLogout, setShowoutput, setcsvData }) => {\n  const classes = useStyles();\n  const [name, setName] = useState();\n  const [email, setEmail] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [file, setFile] = useState();\n  const [rawData, setRawData] = useState();\n  const [cityList, setCityList] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [hasUpdatedUserInformation, setHasUpdatedUserInformation] = useState(\n    false\n  );\n\n  useEffect(() => {\n    const userInformation = getCurrentUserInformation();\n    if (userInformation?.name) {\n      setName(userInformation.name);\n      setAge(userInformation.age);\n      setEmail(userInformation.email);\n      setGender(userInformation.gender);\n      setCountry(userInformation.country);\n      setCity(userInformation.city);\n      setCityList(cities[userInformation.country]);\n    }\n  }, []);\n\n  const btnEnabeled =\n    !!name &&\n    !!email &&\n    !!age &&\n    !!gender &&\n    !!city &&\n    !!country &&\n    hasUpdatedUserInformation &&\n    (!!file || !!rawData);\n\n  const handleReset = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setAge(\"\");\n    setGender(\"\");\n    setCity(\"\");\n    setCountry(\"\");\n    setFile();\n    setShowoutput(false);\n    setcsvData(\"\");\n    setRawData(\"\");\n    setHasError(false);\n    saveUserInformation({});\n    saveSalesData([]);\n    setHasUpdatedUserInformation(false);\n  };\n\n  const onUpdateUserInformation = () => {\n    const canUpdateInformation = name && email && gender && country && city;\n    if (!canUpdateInformation) {\n      toast.error(\"Please fill up the missing user informations!!!\");\n      setHasError(true);\n      return;\n    }\n\n    const userInformationObject = {\n      email,\n      name,\n      gender,\n      age,\n      country,\n      city,\n      userId: localStorage.getItem(\"currentUserId\"),\n    };\n\n    fetch(\"/api/userinformation\", {\n      method: \"post\",\n      body: JSON.stringify(userInformationObject),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setHasError(false);\n        saveUserInformation(userInformationObject);\n        setHasUpdatedUserInformation(true);\n        toast.success(\"Successfully updated user information\");\n      })\n      .catch((err) => console.log(err));\n  };\n\n  /**\n   * Converts the parsed array data from csv file to csv string, and display set rawData prop to display\n   * it in Manual CSV Data input field\n   *\n   * @param {array} data - parsed array of objects from csv file\n   */\n  const updateData = (data) => {\n    const csv = Papa.unparse(data.data);\n    setRawData(csv);\n  };\n\n  /**\n   * Checks if data is already available in Manual CSV Data input field\n   * if available, then open confirmation dialog and ask user for confirmation to replace data\n   * If not available, then call handleCSVUpload to prepare data for chart and table\n   */\n  const confirmUpload = () => {\n    if (!!rawData) {\n      setOpenDialog(true);\n    } else {\n      handleCSVUpload();\n    }\n  };\n\n  /**\n   * Validate the uploaded file type, if it's not in text/csv format, then display error\n   * If file is valid, parse the file and execute callback function\n   */\n  const handleCSVUpload = () => {\n    if (!!file && file.type === \"text/csv\") {\n      Papa.parse(file, {\n        complete: updateData,\n      });\n    } else {\n      toast.error(\"Please upload valid csv file\");\n    }\n    setOpenDialog(false);\n  };\n\n  /**\n   * This function actully parse the final data used to show table and charts in output screen\n   * Check if rawData (comma seprated string) exists, if yes then convert it to array and call showOutPut function\n   */\n  const handleSubmit = () => {\n    if (!!rawData) {\n      Papa.parse(rawData, {\n        complete: onShowOutPut,\n      });\n    }\n  };\n\n  /**\n   * Set csvData prop and shows the ocountriesutput page\n   */\n  const onShowOutPut = (data) => {\n    data.data.shift();\n    const rows = sortSaleData(preProcessData(data.data), sortKeys[0]);\n    fetch(\"/api/sales\", {\n      method: \"post\",\n      body: JSON.stringify(rows),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        saveSalesData(data.sales); // saving sales data in local storage using mock API call.\n        setShowoutput(true);\n        // toast.success(\"Successfully updated user information\");\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"right\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={() => {\n              logout();\n              onLogout(localStorage.getItem(\"authToken\"));\n            }}\n          >\n            Logout\n          </Button>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h6\">User</Typography>\n      <Grid container spacing={3} alignItems={\"center\"}>\n        <Grid item xs={6}>\n          <TextField\n            error={(hasError && !name) || (name && !isValidName(name))}\n            helperText={\n              !name && hasError\n                ? \"Name can not be empty\"\n                : name && !isValidName(name)\n                ? \"Name should have first name and last name\"\n                : \"\"\n            }\n            id=\"name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            fullWidth={true}\n            onChange={(event) => {\n              setName(event.target.value);\n            }}\n            value={name}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n              Gender\n            </InputLabel>\n            <Select\n              error={hasError && !gender}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={gender}\n              onChange={(event) => {\n                setGender(event.target.value);\n              }}\n              label=\"Gender\"\n            >\n              {genders.map((item, index) => (\n                <MenuItem value={item} key={index}>\n                  {item}\n                </MenuItem>\n              ))}\n            </Select>\n            {!gender && hasError && (\n              <FormHelperText error>Gender can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Age</InputLabel>\n            <Select\n              error={hasError && !age}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={age}\n              onChange={(event) => {\n                setAge(event.target.value);\n              }}\n              label=\"Age\"\n            >\n              {[...Array(121)].map((elementInArray, index) => (\n                <MenuItem value={index} key={index}>\n                  {index}\n                </MenuItem>\n              ))}\n            </Select>\n            {!age && hasError && (\n              <FormHelperText error>Age can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            error={(hasError && !email) || (email && !isValidEmail(email))}\n            helperText={\n              !email && hasError\n                ? \"Email can not be empty\"\n                : email && !isValidEmail(email)\n                ? \"Please insert a valid email address.\"\n                : \"\"\n            }\n            id=\"email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            fullWidth={true}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n            }}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n              Country\n            </InputLabel>\n            <Select\n              error={hasError && !country}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={country}\n              onChange={(event) => {\n                setCountry(event.target.value);\n                setCity(\"\");\n                setCityList(cities[event.target.value]);\n              }}\n              label=\"Country\"\n            >\n              {countries.map((item) => (\n                <MenuItem value={item} key={item}>\n                  {item}\n                </MenuItem>\n              ))}\n            </Select>\n            {!country && hasError && (\n              <FormHelperText error>Country can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n        <Grid item xs={3}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">City</InputLabel>\n            <Select\n              error={hasError && !city}\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={city}\n              onChange={(event) => {\n                setCity(event.target.value);\n              }}\n              label=\"City\"\n            >\n              {cityList.map((item) => (\n                <MenuItem value={item}>{item}</MenuItem>\n              ))}\n            </Select>\n            {!city && hasError && (\n              <FormHelperText error>City can not be empty</FormHelperText>\n            )}\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"left\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={onUpdateUserInformation}\n          >\n            Update User Data\n          </Button>\n        </Grid>\n      </Grid>\n      <br />\n      <Typography variant=\"h6\">Input Data</Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={10}>\n          <TextField\n            id=\"name\"\n            variant=\"outlined\"\n            type=\"file\"\n            fullWidth={true}\n            onChange={(event) => {\n              setFile(event.target.files[0]);\n            }}\n            accept=\"csv\"\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"primary\"\n            className={classes.margin}\n            style={{\n              float: \"right\",\n              height: 55,\n              width: \"100%\",\n            }}\n            onClick={confirmUpload}\n            disabled={!file}\n          >\n            Upload File\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Manual CSV Data Input\"\n            multiline\n            rows={10}\n            variant=\"outlined\"\n            rowsMax={10}\n            fullWidth={true}\n            onChange={(event) => {\n              setRawData(event.target.value);\n            }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={rawData}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            className={classes.margin}\n            disabled={!btnEnabeled}\n            style={{ marginRight: 20 }}\n            onClick={handleSubmit}\n          >\n            Upload\n          </Button>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={handleReset}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n      <Dialog\n        openDialog={openDialog}\n        handleCloseDialog={() => {\n          setOpenDialog(false);\n        }}\n        handleAccept={handleCSVUpload}\n      />\n      <ToastContainer />\n    </>\n  );\n};\nexport default InputPage;\n","import React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\n\nexport default function Output(props) {\n\tconst data = props.data\n\tif (!data || data === undefined) {\n\t\treturn null\n\t}\n\n\tconst columns = [\n\t\t{ field: 'date', headerName: 'Date'},\n\t\t{ field: 'product', headerName: 'Product'},\n\t\t{ field: 'sales_number', headerName: 'Sales Number'},\n\t\t{ field: 'revenue', headerName: 'Revenue'},\n\t];\n\n\treturn (\n\t\t<div style={{ height: 400, width: '100%' }}>\n\t\t\t<DataGrid rows={data} columns={columns} pageSize={5} checkboxSelection />\n\t\t</div>\n\t)\n}\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst Chart = (props) => {\n  const data = props.data;\n\n  if (!data || data === undefined) {\n    return null;\n  }\n\n  const labels = data.map((row) => row[\"product\"]);\n\n  const state = {\n    labels: labels,\n    datasets: [\n      {\n        label: props.yAxisLabel,\n        backgroundColor: \"#0000FF\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: data.map((row) => row[props.yAxisLabel]),\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Bar\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text: `${props.yAxisLabel} per product`,\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport {\n  Table,\n  TableCell,\n  TableRow,\n  TableContainer,\n  TableHead,\n  TableBody,\n  Paper,\n} from \"@material-ui/core\";\n\nconst StatTable = (props) => {\n  const data = props.data;\n\n  if (!data || data === undefined || Object.keys(data).length === 0) {\n    return null;\n  }\n\n  const columns = [\n    { field: \"avgSaleCurrentUser\", headerName: \"\" },\n    { field: \"avgSale\", headerName: \"\" },\n    { field: \"\", headerName: \"\" },\n    {\n      field: \"mostRevenueEarningProduct\",\n      headerName: \"\",\n    },\n    { field: \"mostSoldProduct\", headerName: \"\" },\n  ];\n\n  return (\n    <div style={{ height: 400, width: \"100%\" }}>\n      <TableContainer component={Paper}>\n        <Table style={{ minWidth: 700 }} aria-label=\"spanning table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Average Sales for Employee</TableCell>\n              <TableCell align=\"center\">Average Sales for All Employees</TableCell>\n              <TableCell align=\"center\">Highest Revenue Sale</TableCell>\n              <TableCell align=\"center\">Highest Revenue Product</TableCell>\n              <TableCell align=\"center\">Highest Selling Product</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>UserName</TableCell>\n                      <TableCell>Average</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{props.currentUserName}</TableCell>\n                      <TableCell>{data.avgSaleCurrentUser}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Average</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.avgSale}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Revenue</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostExpensiveProduct.product}</TableCell>\n                      <TableCell>{Number(data.mostExpensiveProduct.revenue)}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Total Revenue</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostRevenueEarningProduct.name}</TableCell>\n                      <TableCell>{data.mostRevenueEarningProduct.revenue}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n              <TableCell>\n                <Table component={Paper}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Total Sales</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>{data.mostSoldProduct.name}</TableCell>\n                      <TableCell>{data.mostSoldProduct.count}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                </Table>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default StatTable;\n","import React, { useEffect, useState } from \"react\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useStyles from \"../layout/Style\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { logout } from \"../utils/mockApiHelper\";\nimport { sortSaleData } from \"../utils/helpers\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport StatTable from \"./StatTable\";\nimport { chartFilters, sortKeys } from \"../data\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst OutputPage = ({ onLogout, handleReset }) => {\n  const [userInfo, setUserInfo] = useState({});\n  const [name, setName] = useState();\n  const [email, setEmail] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [aggregatedData, setAggregatedData] = useState({});\n  const classes = useStyles();\n\n  const [csvData, setcsvData] = useState([]);\n  const [chartFilter, setChartFilter] = useState(chartFilters[0]);\n  const [orderBy, setOrderBy] = useState(sortKeys[0]);\n\n  useEffect(() => {\n    /**\n     * Expected response:\n     * {\n     *    userInformation: {\n     *      name: string, \n     *      email: string, \n     *      age: number, \n     *      gender: string, \n     *      city: string, \n     *      country: string \n     *    }\n     * }\n     */\n    fetch(\"/api/userinformation/\" + localStorage.getItem(\"currentUserId\"))\n      .then((res) => res.json())\n      .then((data) => {\n        setUserInfo(data.userInformation);\n      });\n\n      /**\n       * Expected response:\n       * {\n       *    sales: {\n       *        date: string\n       *        id: string\n       *        product: string\n       *        revenue: string\n       *        sales_number: string\n       *        userId: string\n       *    }\n       * }\n       */\n    fetch(\"/api/sales/\" + localStorage.getItem(\"currentUserId\"))\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data.sales);\n        setcsvData([...data.sales]);\n      });\n\n    /**\n     * Expected Response:\n     * {\n     *  \"aggregatedData\":{\n     *       \"avgSaleCurrentUser\": number,\n     *       \"avgSale\": number,\n     *       \"mostExpensiveProduct\":{\n     *         \"userId\": string,\n     *         \"id\": string,\n     *         \"date\": string,\n     *         \"product\": string,\n     *         \"sales_number\": string,\n     *         \"revenue\": string\n     *       },\n     *       \"mostRevenueEarningProduct\":{\n     *         \"name\": string,\n     *         \"revenue\": number\n     *       },\n     *       \"mostSoldProduct\":{\n     *         \"name\": string,\n     *         \"count\": number\n     *       }\n     *   }\n     * }\n     */\n    fetch(\"/api/aggregated_data/\" + localStorage.getItem(\"currentUserId\"))\n      .then((res) => res.json())\n      .then((data) => {\n        setAggregatedData(data.aggregatedData);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (userInfo?.name) {\n      const { name, email, age, gender, city, country } = userInfo;\n      setName(name);\n      setEmail(email);\n      setAge(age);\n      setGender(gender);\n      setCity(city);\n      setCountry(country);\n    }\n  }, [userInfo]);\n\n  useEffect(() => {\n    if (csvData && csvData.length) {\n      const rows = sortSaleData(csvData, orderBy);\n      setcsvData([...rows]);\n    }\n  }, [orderBy]);\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"right\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={() => {\n              logout();\n              onLogout(localStorage.getItem(\"authToken\"));\n            }}\n          >\n            Logout\n          </Button>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h6\">Personal Information</Typography>\n      <Grid container spacing={8}>\n        <Grid item xs={6}>\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Name :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{name}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Age :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{age}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>\n                Gender :\n              </p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{gender}</p>\n            </Grid>\n          </Grid>\n          <hr />\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container spacing={4}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>Email :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{email}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>\n                Country :\n              </p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{country}</p>\n            </Grid>\n          </Grid>\n          <hr />\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"left\", fontWeight: \"bolder\" }}>City :</p>\n            </Grid>\n            <Grid item xs={6}>\n              <p style={{ textAlign: \"right\" }}>{city}</p>\n            </Grid>\n          </Grid>\n          <hr />\n        </Grid>\n      </Grid>\n      {csvData?.length && (\n        <Grid container spacing={8}>\n          <Grid item xs={6}>\n            <Grid container xs={12}>\n              <Grid item lg={9}>\n                <Typography variant=\"h6\">Data</Typography>\n              </Grid>\n              <Grid item lg={3}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-outlined-label\">\n                    OrderBy\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={orderBy}\n                    onChange={(event) => {\n                      setOrderBy(event.target.value);\n                    }}\n                    label=\"OrderBy\"\n                  >\n                    {sortKeys.map((item, index) => (\n                      <MenuItem value={item} key={index}>\n                        {item}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Table data={csvData} />\n          </Grid>\n          <Grid item xs={6}>\n            <Grid container xs={12}>\n              <Grid item lg={9}>\n                <Typography variant=\"h6\">Chart</Typography>\n              </Grid>\n              <Grid item lg={3}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-outlined-label\">\n                    Y-Axis\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={chartFilter}\n                    onChange={(event) => {\n                      setChartFilter(event.target.value);\n                    }}\n                    label=\"YAxis\"\n                  >\n                    {chartFilters.map((item, index) => (\n                      <MenuItem value={item} key={index}>\n                        {item}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Chart data={csvData} yAxisLabel={chartFilter} />\n          </Grid>\n        </Grid>\n      )}\n      {aggregatedData && (\n        <Grid container spacing={8}>\n          <Grid item lg={12}>\n            <Typography variant=\"h6\">Statistics Table</Typography>\n          </Grid>\n          <Grid item lg={12}>\n            <Grid container>\n              <StatTable data={aggregatedData} currentUserName={name} />\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      <Grid container spacing={3}>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"secondary\"\n            onClick={handleReset}\n          >\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\nexport default OutputPage;\n","import React, { useEffect, useState } from \"react\";\nimport { getCurrentUserInformation, saveUserInformation, saveSalesData, getSalesData } from \"../utils/mockApiHelper\";\nimport InputPage from \"./InputPage\";\nimport OutputPage from \"./OutputPage\";\n\nconst Main = ({ onLogout }) => {\n  const [showOutput, setShowoutput] = useState(false);\n  const [csvData, setcsvData] = useState([]);\n\n  useEffect(() => {\n    const userInformation = getCurrentUserInformation();\n    const salesData = getSalesData();\n\n    if (userInformation?.name && salesData?.length) {\n      setShowoutput(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const userInformation = getCurrentUserInformation();\n    const salesData = getSalesData();\n    if (salesData && showOutput) {\n      const rows = salesData.filter(\n        (item) => item.userId === userInformation?.userId\n      );\n      setcsvData([...rows]);\n    }\n  }, [showOutput]);\n\n  const handleReset = () => {\n    setShowoutput(false);\n    setcsvData([]);\n    saveUserInformation({});\n    saveSalesData([]);\n  };\n\n  return (\n    <>\n      {!showOutput && (\n        <InputPage\n          onLogout={onLogout}\n          setcsvData={setcsvData}\n          setShowoutput={setShowoutput}\n        />\n      )}\n      {!!showOutput && (\n        <OutputPage\n          handleReset={handleReset}\n          onLogout={onLogout}\n        />\n      )}\n    </>\n  );\n};\nexport default Main;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Login from \"./Login\";\nimport useStyles from \"../layout/Style\";\nimport Main from \"../components/Main\";\nimport { belongsTo, createServer, hasMany, Model } from \"miragejs\";\nimport saleData from \"../api/sales_data\";\nimport userData from \"../api/user\";\nimport {\n  getAverageSale,\n  getMostExpensiveProduct,\n  getMostRevenueEarningProduct,\n  getMostSoldProduct,\n} from \"../utils/helpers\";\nimport { generateToken } from \"../utils/mockApiHelper\";\n\ncreateServer({\n  models: {\n    user: Model,\n    sale: Model.extend({\n      user: belongsTo(),\n    }),\n    userinformation: Model,\n  },\n\n  seeds(server) {\n    userData.forEach((user) => {\n      server.create(\"user\", user);\n    });\n  },\n\n  routes() {\n    this.post(\"/api/token\", (schema, request) => {\n      var users = schema.users.all().models;\n      var data = JSON.parse(request.requestBody);\n\n      const user = users.find((item) => {\n        return item.email === data.email && item.password === data.password;\n      });\n\n      if (user && user.password === data.password) {\n        var token = generateToken(64);\n        return {\n          access_token: token,\n          token_type: \"Bearer\",\n          user_id: user.id,\n        };\n      } else {\n        return Response(\n          401,\n          {},\n          {\n            code: 401,\n            message: \"Invalid username and/or password, please try again\",\n          }\n        );\n      }\n    });\n\n    this.post(\"/api/userinformation\", (schema, request) => {\n      const payLoad = JSON.parse(request.requestBody);\n      schema.db.userinformations.insert(payLoad);\n      return { userinformation: payLoad };\n    });\n\n    this.get(\"/api/userinformation/:userId\", (schema, request) => {\n      const currentUserInfo = schema.userinformations\n        .all()\n        .models.find((item) => {\n          return item.userId === request.params.userId;\n        });\n\n      return { userInformation: currentUserInfo };\n    });\n\n    this.post(\"/api/sales\", (schema, request) => {\n      const payLoad = JSON.parse(request.requestBody);\n      schema.db.sales.insert(payLoad);\n      return { sales: payLoad };\n    });\n\n    this.get(\"/api/sales/:userId\", (schema, request) => {\n      const currentUserId = request.params.userId;\n      const salesData = schema.sales.all().models;\n      const currentUserSalesData = salesData.filter(\n        (item) => item.userId === currentUserId\n      );\n      return { sales: currentUserSalesData };\n    });\n\n    this.get(\"/api/aggregated_data/:userId\", (schema, request) => {\n      const currentUserId = request.params.userId;\n      const salesData = schema.sales.all().models;\n      const currentUserSalesData = salesData.filter(\n        (item) => item.userId === currentUserId\n      );\n      return {\n        aggregatedData: {\n          avgSaleCurrentUser: getAverageSale(currentUserSalesData),\n          avgSale: getAverageSale(salesData),\n          mostExpensiveProduct: getMostExpensiveProduct(currentUserSalesData),\n          mostRevenueEarningProduct: getMostRevenueEarningProduct(\n            currentUserSalesData\n          ),\n          mostSoldProduct: getMostSoldProduct(currentUserSalesData),\n        },\n      };\n    });\n  },\n});\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const [token, setToken] = useState(localStorage.getItem(\"authToken\"));\n\n  if (!token) {\n    return (\n      <Login\n        onLoginSuccess={setToken}\n      />\n    );\n  }\n  return (\n    <Paper className={classes.control}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Main onLogout={setToken} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Dashboard;\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport clsx from 'clsx'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport useStyles from './Style'\n\nconst Header = () => {\n\tconst classes = useStyles()\n\treturn (\n\t\t<AppBar\n\t\t\tposition='absolute'\n\t\t\tclassName={clsx(classes.appBar)}\n\t\t>\n\t\t\t<Toolbar className={classes.toolbar}>\n\t\t\t\t<Typography\n\t\t\t\t\tcomponent='h1'\n\t\t\t\t\tvariant='h6'\n\t\t\t\t\tcolor='inherit'\n\t\t\t\t\tnoWrap\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t>\n\t\t\t\t\tReact Web App\n\t\t\t\t</Typography>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t)\n}\n\nexport default Header\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport useStyles from './Style'\nimport Header from './Header'\n\nconst Layout = (props) => {\n\tconst classes = useStyles()\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<Header />\n\t\t\t<main className={classes.content}>\n\t\t\t\t<div className={classes.appBarSpacer} />\n\t\t\t\t<Container maxWidth='lg' className={classes.container}>\n\t\t\t\t\t{props.children}\n\t\t\t\t</Container>\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nexport default Layout\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from '../src/pages/Dashboard'\nimport reportWebVitals from './reportWebVitals'\nimport Layout from './layout/index'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Layout>\n\t\t\t<App />\n\t\t</Layout>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}